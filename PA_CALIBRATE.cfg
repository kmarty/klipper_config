[gcode_macro PA_CALIBRATE]
# Borrowed from: https://github.com/th33xitus/klipper_config
description: Print Pressure Advance calibration pattern. Required parameters: BED_TEMP, EXTRUDER_TEMP
gcode:
    ######################################################################################
    ####                             DEFINE USER PARAMETERS                            ###
    ######################################################################################
    ###############################[ set printer parameters ]#############################
    {% set nozzle_diameter = printer.configfile.config.extruder.nozzle_diameter  | float %}
    {% set bed_size_x      = printer.configfile.config.stepper_x.position_max    | float %}
    {% set bed_size_y      = printer.configfile.config.stepper_y.position_max    | float %}
    ######################[ set parameters for extrusion calculation ]####################
    {% set filament_diameter    = params.FD            | default(1.75)           | float %}
    {% set layer_height         = params.LH            | default(0.2)            | float %}
    {% set nozzle_line_ratio    = params.EW            | default(1.2)            | float %}
    {% set extrusion_multiplier = params.EM            | default(1.0)            | float %}
    ################################[ set temperatures ]##################################
    {% if not params.BED_TEMP %}
      {action_raise_error("BED_TEMP parameter not defined")}
    {% endif %}
    {% if not params.EXTRUDER_TEMP %}
      {action_raise_error("EXTRUDER_TEMP parameter not defined")}
    {% endif %}
    {% set bed_temp             = params.BED_TEMP      | default(printer.heater_bed.target, true) %}
    {% set extruder_temp        = params.EXTRUDER_TEMP | default(printer.extruder.target, true)   %}
    ###############################[ set test parameters ]################################
    {% set slow_speed           = params.SLOW_SPEED    | default(25)             | float %}
    {% set slow_length          = params.SLOW_LENGTH   | default(20)             | float %}
    {% set fast_speed           = params.FAST_SPEED    | default(120)            | float %}
    {% set fast_length          = params.FAST_LENGTH   | default(40)             | float %}
    {% set travel_speed         = params.TRAVEL_SPEED  | default(180)            | float %}
    {% set pa_start             = params.PA_START      | default(0.0)            | float %}
    {% set pa_end               = params.PA_END        | default(0.1)            | float %}
    {% set pa_step              = params.PA_STEP       | default(0.005)          | float %}
    {% set line_spacing         = params.SPACING       | default(5)              | float %}
    ######################################################################################
    ####                           !!! DO NOT EDIT BELOW !!!                           ###
    ######################################################################################
    {% set spacing = line_spacing                                                       %}
    {% set fd      = filament_diameter                                                  %}
    {% set nd      = nozzle_diameter                                                    %}
    {% set ew      = nozzle_diameter * nozzle_line_ratio                                %}
    {% set em      = extrusion_multiplier                                               %}
    {% set lh      = layer_height                                                       %}
    {% set pa      = pa_start                                                           %}
    ##################################[ calculations ]####################################
    {% set slow_speed           = slow_speed * 60                               | float %}
    {% set fast_speed           = fast_speed * 60                               | float %}
    {% set travel_speed         = travel_speed * 60                             | float %}
    {% set lines    = (((pa_end - pa_start) / pa_step) + 1) | round(0, 'ceil')  | int   %}
    {% set p_width  = ((2 * slow_length + fast_length))                                 %}
    {% set p_height = (lines * (spacing + (nd * ew)))                                   %}
    {% set p_width_total  = p_width + 20                                                %}
    {% set p_height_total = p_height + 40                                               %}
    {% set start_x_pos    = (bed_size_x - p_width) / 2                                  %}
    {% set end_x_pos      = (bed_size_x + p_width) / 2                                  %}
    {% set start_y_pos    = (bed_size_y - p_height) / 2                                 %}
    {% set end_y_pos      = (bed_size_y + p_height) / 2                                 %}
    {% set x_pos          = start_x_pos                                                 %}
    {% set y_pos          = start_y_pos                                                 %}
    ########################[ check if test patter fits on bed ]##########################
    {% if p_height_total > bed_size_y or p_width_total > bed_size_x %}
      {% set exceeds_bed_area = true  %}
    {% else %}
      {% set exceeds_bed_area = false %}
    {% endif %}
    ######################################################################################
    ### Using Slic3r flow math to calculate extrusion amounts:                         ###
    ######################################################################################
    ### V_in  = (pi * fd ** 2) / 4 * E                                                 ###
    ### V_out = A * L * em                                                             ###
    ### V_in  = V_out                                                                  ###
    ### A     = (ew - lh) * lh + pi * (lh / 2) ** 2                                    ###
    ### E     = ((A * L * 4) / (pi * fd ** 2)) * em                                    ###
    ######################################################################################
    {% set pi      = 3.141592654                                     | float            %}
    {% set A       = (ew - lh) * lh + pi * (lh / 2) ** 2             | float            %}
    {% set E_frame = (((A * p_height * 4) / (pi * fd ** 2)) * em)    | round(6, 'ceil') %}
    {% set E_slow  = (((A * slow_length * 4) / (pi * fd ** 2)) * em) | round(6, 'ceil') %}
    {% set E_fast  = (((A * fast_length * 4) / (pi * fd ** 2)) * em) | round(6, 'ceil') %}
    {% set E_mark  = (((A * 20 * 4) / (pi * fd ** 2)) * em)          | round(6, 'ceil') %}
    ######################################################################################
    ### START CALIBRATION ###
    {% if 'gcode_macro _SET_PLATE_OFFSET' in printer %}
      _SET_PLATE_OFFSET
    {% endif %}
    START_PRINT EXTRUDER_TEMP={extruder_temp} BED_TEMP={bed_temp}
    G90 ; Absolute XYZ
    M83 ; Relative E
    ### PRINT ANCHOR FRAME ###
    G10
    G1 Z{ layer_height } ; move Z down
    G1 X{start_x_pos} Y{start_y_pos} F{travel_speed}
    G11
    G1 X{start_x_pos} Y{end_y_pos} E{E_frame} F{slow_speed}
    G10
    G1 X{end_x_pos} Y{start_y_pos} F{travel_speed}
    G11
    G1 X{end_x_pos} Y{end_y_pos} E{E_frame} F{slow_speed}
    G10
    ### Move close to beginning and wait a while ###
    G1 X{end_x_pos + 1} F{travel_speed}
    {% if start_y_pos - 1 >= 0 %}
      G1 Y{start_y_pos - 1} F{travel_speed}
    {% else %}
      G1 Y0 F{travel_speed}
    {% endif %}
    {% if start_x_pos - 1 >= 0 %}
      G1 X{start_x_pos - 1} F{travel_speed}
    {% else %}
      G1 X0 F{travel_speed}
    {% endif %}
    G4 P2000
    ### START TEST PATTERN ###
    SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={ pa }
    {% for i in range(lines) %}
        {% if not loop.first %}
            {% set y_pos = y_pos + (i * (spacing + ew)) %}
            {% set pa = pa + (i * pa_step) %}
            SET_PRESSURE_ADVANCE EXTRUDER=extruder ADVANCE={ pa }
        {% endif %}
        M117 PA={ pa }
        RESPOND MSG="PA={pa}"
        ### move to line starting postion
        G1 X{ x_pos } Y{ y_pos } F{ travel_speed }
        G11 ; un-retract
        ### print first slow part
        {% set x_pos = x_pos + slow_length %}
        G1 X{ x_pos } Y{ y_pos } E{ E_slow } F{ slow_speed }
        ### print fast part
        {% set x_pos = x_pos + fast_length %}
        G1 X{ x_pos } Y{ y_pos } E{ E_fast } F{ fast_speed }
        ### print second slow part
        {% set x_pos = x_pos + slow_length %}
        G1 X{ x_pos } Y{ y_pos } E{ E_slow } F{ slow_speed }
        G10 ; retract
        ### reset x position
        {% set x_pos = start_x_pos %}
    {% endfor %}
    ### PRINT MARKER ###
    G1 X{ x_pos + slow_length } Y{ end_y_pos + 5 } F{ travel_speed } ; move to position marker 1
    G11 ; un-retract
    G1 Y{ end_y_pos + 5 + 20 } E{ E_mark } F{ slow_speed } ; print marker 1
    G10 ; retract
    G1 X{ x_pos + slow_length + fast_length } Y{ end_y_pos + 5 } F{ travel_speed } ; move to position marker 2
    G11 ; un-retract
    G1 Y{ end_y_pos + 5 + 20 } E{ E_mark } F{ slow_speed } ; print marker 2
    G10 ; retract
    ### END CALIBRATION ###
    END_PRINT

