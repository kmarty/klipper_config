[gcode_macro PRIME_LINE]
description: Prints an primeline next to printed object, used internally, if configured, as part of the START_PRINT macro. Extrusion is based on nozzle_diameter
variable_distance_to_object_x: 20   # Distance in x to the print area, enough to avoid skirt
variable_distance_to_object_y: 20   # Distance in y to the print area, enough to avoid skirt
variable_primeline_length: 100      # Whole primeline + wipe

gcode:
  SAVE_GCODE_STATE NAME=prime_line_state
  {% set speed = printer["gcode_macro RatOS"].macro_travel_speed|float * 60 %}

  {% set nozzle_diameter = printer.configfile.settings.extruder.nozzle_diameter %}
  {% set filament_diameter = printer.configfile.settings.extruder.filament_diameter %}
  {% set layer_height = 0.75 * nozzle_diameter %}

  {% set safe_extrude_cross_section = ( 4 * nozzle_diameter**2 ) * 0.85 %}
  {% set print_movement_length = 0.70 * primeline_length %}
  {% set extruded_length = safe_extrude_cross_section / ((filament_diameter/2)**2 * 3.14) * print_movement_length %}

  {% set x_default = printer.toolhead.axis_minimum.x + 5 %}
  {% set y_default = printer.toolhead.axis_minimum.y + 10 %}

  # Get mins of "exclude_objects" if available
  {% set all_points = printer.exclude_object.objects | map(attribute='polygon') | sum(start=[]) %}
  {% set x_excl_objects = (all_points | map(attribute=0) | min | default(x_default + distance_to_object_x)) - distance_to_object_x %}
  {% set y_excl_objects = (all_points | map(attribute=1) | min | default(y_default + distance_to_object_y)) - distance_to_object_y %}

  # Get mins of "bed_mesh" if available (or zeros if bed_mesh_min is at minimum to force default values)
  {% set bed_mesh_x_min = printer.bed_mesh.mesh_min[0] if printer.bed_mesh.mesh_min[0] > printer.configfile.settings.bed_mesh.mesh_min[0] else 0 %}
  {% set bed_mesh_y_min = printer.bed_mesh.mesh_min[1] if printer.bed_mesh.mesh_min[1] > printer.configfile.settings.bed_mesh.mesh_min[1] else 0 %}

  #{ action_respond_info("x_excl_objects: " + x_excl_objects|string + ", bed_mesh_x_min: " + bed_mesh_x_min|string + ", x_default: " + x_default|string) }
  #{ action_respond_info("y_excl_objects: " + y_excl_objects|string + ", bed_mesh_y_min: " + bed_mesh_y_min|string + ", y_default: " + y_default|string) }

  {% set x_origin = ([x_excl_objects, bed_mesh_x_min, x_default] | max) %}
  {% set y_origin = ([y_excl_objects, bed_mesh_y_min, y_default] | max) %}

  # Move primeline y_origin if it's too close to y_max
  {% set y_origin = ([y_origin, (printer.configfile.settings.stepper_y.position_max - primeline_length - 5)] | min) %}

  #{ action_respond_info("x_origin: " + x_origin|string + ", y_origin: " + y_origin|string) }
  
  # Absolute positioning
  G90 
  # Absolute extrusion
  M82
  M117 Priming nozzle with adaptive prime line..
  RESPOND MSG="Priming nozzle with prime line next to printed object (for {nozzle_diameter}mm nozzle).."
  # X (pre)move
  G1 X{x_origin} F{speed}
  # Y (pre)move
  G1 Y{[y_default, y_origin - 20] | max} F{speed}
  # Lift 5 mm
  G1 Z5 F3000
  # Get ready to prime (combined move)
  G1 X{x_origin} Y{y_origin} Z{layer_height} F3000
  # Reset extrusion distance
  G92 E0
  # Prime nozzle
  G1 Y{y_origin + print_movement_length} E{extruded_length} F1200
  # Wipe
  G1 Y{y_origin + primeline_length} F{speed}
  # Move slightly towards the print (to avoid possible collision with prime line)
  G1 X{x_origin + 1} F{speed}
  RESTORE_GCODE_STATE NAME=prime_line_state
